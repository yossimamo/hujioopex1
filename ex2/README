urig03
ymamo29

Uri Greenberg 021986039
Yossi Mamo 038073722

-------------------------------
OOP Ex2 (File processing tool) README file
-------------------------------

-------------------------------
File Descriptions:
-------------------------------

Action.java - an abstract class which represents an action. has a method
which is common to all actions, execute.

AbstractRenameAction.java - an abstract class which is a parent to all actions
that rename a file (AddPrefixAction and AddSuffixAction).

AddPrefixAction.java - an action which renames the file, adding prefix at the
beginning of its name (excluding path).

AddSuffixAction.java - an action which renames the file, adding suffix at the
end of its name.

CopyAction.java - an action which copies a file (and its path from the source
directory) into the given target directory.

PrintAction.java - an action which prints the full file's name into the given
stream.

CommandFile.java - Represents a command file which may contain multiple
sections of filters and actions.

InvalidActionException.java - Represents an error thrown upon an invalid
action given as input.

InvalidActionParametersException.java - Represents an error thrown upon
invalid action parameters given as input.

InvalidCommandLineParametersException.java - Represents an error thrown upon
invalid command line parameters

InvalidFilterExpressionException.java - Represents an error thrown upon
encountering an invalid filter expression

InvalidFilterParametersException.java - Represents an error thrown upon
encountering invalid filter parameters

InvalidSectionException.java - Represents an error thrown upon encountering
an invalid section

IOFailureException.java - Represents an error thrown upon an I/O failure
of any kind

MyFileScript.java - A program which allows mass manipulation of files 
according to preconfigured filters and actions.

Section.java - Represents a single section inside a command file.

UnsupportedFilterException.java - Represents an error thrown upon encountering
an unsupported filter

Filter.java - an abstract class which represents a filter. has a method
which is common to all filters, isMatch.

CompoundFilter.java - an abstract class which represents a compound filter.
it holds two fields (of filters) which are common to all compound filters.

AndFilter.java - a class which represents an And compound filter.
for the file to satisfy the filter it must satisfy both filters in the 
fields.

OrFilter.java - a class which represents an Or compound filter.
for the file to satisfy the filter it must satisfy one of the filters in
the fields.

NotFilter.java - a filter which holds another filter as a field and is
satisfied only if the filter in the field is not.

BooleanFilter.java - an abstract class which inherits to filters that have
a condition (IsReadableFilter and IsWritableFilter).

IsReadableFilter.java - a filter which checks if the file is readable.

IsWritableFilter.java - a filter which checks if the file is writable.

WildcardFilter.java - an abstract class which inherits to the filters that
uses a wildcard expression.

SubdirWildcardFilter.java - a filter which checks if the wildcard expression
fits the canonical name of the file.

FileWildcardFilter.java - a filter which checks if the wildcard expression
fits the name of the file.

ModificationDateFilter.java - an abstract class which inherits to all filters
that check the date of the file.

ModifiedOnFilter.java - a filter which checks if the file was last modified
on the given date.

ModifiedBeforeFilter.java - a filter which checks if the file was last
modified before the given date.

ModifiedAfterFilter.java - a filter which checks if the file was last modified
after the given date.

SizeFilter.java - an abstract class which inherits to all filters that check
the size of the file.

SizeSmallerFilter.java - a filter which checks if the file is smaller than
the given parameter.

SizeEqualFilter.java - a filter which checks if the file equals the given
parameter.

SizeBiggerFilter.java -  a filter which checks if the file is bigger than
the given parameter.

README - This file.

Total: 37 files.

------------------------
Design:
------------------------
In our design we decided to divide the objects into 3 packages.
1. The actions package, which holds all the Action objects.
2. The filters package, which holds all the Filter objects.
3. The filescript package, which holds the entry point of the program itself,
the user interface, the CommandFile implementation and the various exceptions.

actions package - In this package we have an abstract class that represents an 
action. It has a method (execute) which is common to all actions. All the
Action classes inherit from it. In this package we made another abstract
class (AbstractRenameAction.java) that is also an action but it has all the
things that are common to the AddPrefixAction.java class and the
AddSuffixAction.java class. Both classes inherit from the abstract class.
They have a lot of similar features (renaming the file, and their constructor
is identical), and thats why they have an abstract class to inherit from.

filters package - This package contains all of the filters. We made a few
abstract classes in this package. each abstract class is a parent to a few
filters that have common features such as constructors, fields or methods.
We did so in order to make future changes easier and to avoid code repetition.
Filter is an abstract class that all filters inherit from. it holds
a method common to all filters, isMatch.
CompoundFilter is an abstract class. AndFilter and OrFilter both inherit it
because they both have two fields with filters (operands). We decided
not to make NotFilter a compound filter because it holds only one filter as a
field and it is more fit to be considered as a regular filter (and inherit from
Filter). 
SizeBiggerFilter, SizeEqualFilter and SizeSmallerFilter all inherit from 
SizeFilter which is an abstract class.
ModifiedAfterFilter, ModifiedBeforeFilter and ModifiedOnFilter all inherit from
ModificationDateFilter which is an abstract class.
SubdirWildcardFilter and FileWildcardFilter inherit from WildcardFilter which
is an abstract class.
IsReadableFilter and IsWritableFilter inherit from BooleanFilter which is an
abstract class.

filescript package - This is the main package of the program.
The MyFileScript object contains the entry point of the program. It is responsible
for handling the given parameters, creating the CommandFile object and executing
it eventually. Exceptions thrown from the program are usually caught here,
printed out and then the program ends.
The CommandFile object represents a command file. It does not have a public
constructor, but it exposes a static method called createFromFile which
is responsible for parsing a given input file, and, if it is found to be
legally formatted, creating a valid CommandFile object from it and returning
it to the caller. This object holds an ArrayList of Section objects, in the
same order as in the input file. The parsing process makes use of regular
expressions in order to validate and capture information from the input file.
Part of the parsing process is uses a recursive method, as the compound filter
expressions may be nested. If the input file is found to be invalid, an
exception will be thrown from within the parsing process, or upon an attempted
creation of a Filter or Action with invalid/unsupported parameters.
The Section object represents a single section in the input file. Each section
consists of several Filters, comments and a single Action. Each section exposes
an execute method which allows execution of its contents on a given source
directory (that is, printing the comments, matching the filters, and executing
the action on the matched files).  

------------------------
Implementation issues:
------------------------
We decided to implement the project the following way:
The program starts off by validating its command line parameters and then
attempts to convert the given command file into a CommandFile object, which
involves parsing the file and validating its contents. The outcome of this
process is a valid CommandFile object which holds several (one of more) Section
objects, which contain the various Filters, comments and Actions.
Then, assuming the parsing phase has been completed successfully, a CommandFile
object is created and then it may be executed by the main program. Effectively,
this will cause an iteration over the given source directory, matching the
various filters with the files found there, and executing the actions
accordingly.
If an error has occurred during this process, an exception will be thrown
somewhere within the program and caught at the main procedure, which allows
printing of the error message and then cleanly exiting the program.
