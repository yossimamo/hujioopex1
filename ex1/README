urig03
ymamo29

Uri Greenberg 021986039
Yossi Mamo 038073722

-------------------------------
OOP Ex1 (Task Manager) README file
-------------------------------

-------------------------------
File Descriptions:
-------------------------------
AbstractComparableQueue.java - an abstract class which represents
a data structure (a queue or a stack) holding comparable objects.
It holds functions that are being used by both the stack and
the priority queue. Also holds a nested class (RandomIterator).

AbstractPriorityQueue.java - an abstract class representing a 
priority queue.

ArrayPriorityQueue.java - extends AbstractPriorityQueue. practically
it is an implementation of the priority queue.

ComparableObject.java - A generic interface for comparable objects.

EmptyQueueException.java - An exception thrown upon attempts to access an empty
queue.

LIFOComparableQueue.java - A class which represents a stack (LIFO) of
comparable objects.

NoMoreElementsException.java - An exception thrown upon attempts to iterate a
collection after reaching the end of the iteration.

ObjectNotFoundException.java - An exception thrown upon a failed attempt to
find a certain object in a queue.

DisorderException.java - An exception thrown when attempting to run a child
process after its parent.

NoMoreProcessesException.java - An exception thrown when a certain process
has no more subprocesses to iterate.

Process.java - Represents a process with a unique name, priority, termination
time, a single parent and a stack of subprocesses associated with it.

ProcessManager.java - A process manager, responsible for managing and running
all the processes. Holds a priority queue of all the processes in the system.

README - This file.

Total: 13 files.

------------------------
Design:
------------------------
The design was dictated by the exercise description and is not ours.

------------------------
Implementation issues:
------------------------
The priority queue works in such a way that it is a binary
tree implemented with an array. The element at 0 index is the root.
Then for each index (lets call it i) the left son is the element
in the 2*i+1 index and the right son is in the 2*i+2 index.
When we push a new element we add it to the end and then rearrange
the tree according to its priority. First we use the heapify function.
It compares the element with its two sons and switch the bigger son with
the element if needed. It continues doing so until there is no more need
to switch the element with one of its sons or if it has no more sons.
Then we call another function (increaseKey) which basically
does the opposite. It compares the element with its father and 
switches them if needed. It continues doing so until it reached
the root or it is no longer required to switch the element with
its father.
When we poll an element we just take out the first element,
take the last element and put it in the first's place. Then we
use the heapify function again so the tree will be organized again
(the root will be with the highest priority).
The LIFOComparableQueue works just like a regular stack.
When the array gets full we reallocate it and double the size by a 
factor of 2. We decided doing so because it is not efficient to
reallocate the array too often (lets say by +1 each time) and on the
other hand allocating too much memory when it is not necessarily needed
it a waste. We consider doubling the size a good tradeoff between
performance and memory consumption.
The functions of the data structures is demonstrated by the Task Manager,
represented mainly by the ProcessManager and Process objects.
